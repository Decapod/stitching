#!/usr/bin/python

import signal
signal.signal(signal.SIGINT,lambda *args:sys.exit(1))
from pylab import *
import sys,os,re,ocropy,optparse
from ocropy import N,NI
from scipy.ndimage import measurements
from scipy.misc import imsave
from PIL import Image

parser = optparse.OptionParser(usage="""
%prog [options] image1 image2 -o output

Stitch two images together.
""")
parser.add_option("-t","--type",help="stitching type (trivial, liberator, stereo)",default="trivial")
parser.add_option("-o","--output",help="output directory",default="book")
parser.add_option("-B","--binarize",help="binarization component",default="BinarizeByHT")
parser.add_option("-d","--display",help="display result",action="store_true")
parser.add_option("-L","--low",help="low threshold",type=float,default=0.2)
parser.add_option("-H","--high",help="high threshold",type=float,default=0.4)
parser.add_option("-W","--width",help="binarizer width",type=int,default=100)
parser.add_option("-D","--Display",help="display continuously",action="store_true")
parser.add_option("-R","--rotations",help="page rotations",default="lr")
parser.add_option("-C","--crop",help="crop class (e.g., PageFrameRAST)",default=None)
parser.add_option("-r","--dpi",help="approximate resolution",type=float,default=200)
parser.add_option("-q","--silent",help="no binarization checks",default=1)
options,args = parser.parse_args()

assert options.type=="trivial","only trivial stitching is implemented right now";

binarizer = ocropy.make_IBinarize(options.binarize)
if options.binarize=="BinarizeByHT":
    binarizer.pset("max_n",200000.0)
    binarizer.pset("k0",str(options.low))
    binarizer.pset("k1",str(options.high))
    binarizer.pset("width",str(options.width))

if options.crop is not None:
    crop = ocropy.make_ICleanupBinary("PageFrameRAST")
else:
    crop = None

def bshow(bin):
    if options.display:
        clf()
        imshow(NI(bin),cmap=cm.gray)
        draw()
        if not options.Display: 
            raw_input("hit ENTER to continue")
        else:
            ginput(1,timeout=1)

if options.Display: options.display = 1
if options.display: ion(); show()

if len(args)!=2 or options.output is None:
    parser.print_help()
    sys.exit(1)

image = ocropy.bytearray()
temp = ocropy.bytearray()
bin = ocropy.bytearray()
cropped = ocropy.bytearray()

pages = []

for i in range(2):
    arg = args[i]
    sys.stderr.write("# processing %s\n"%arg)
    ocropy.read_image_gray(image,arg)

    r = options.rotations[i]

    if r=="n":
        pass
    elif r=="l":
        ocropy.rotate_270(temp,image)
        image.move(temp)
    elif r=="r":
        ocropy.rotate_90(temp,image)
        image.move(temp)
    elif r=="f":
        ocropy.rotate_180(temp,image)
        image.move(temp)
    else:
        sys.stderr.write("bad rotation spec: %s\n"%r)
        sys.exit(1)

    bshow(image)
    binarizer.binarize(bin,image)
    bshow(bin)
    if crop is not None:
        crop.cleanup(cropped,bin)
        bshow(cropped)
    else:
        cropped.copy(bin)

    if not options.silent:
        if ocropy.quick_check_page_components(cropped,dpi=options.dpi)<0.5:
            sys.stderr.write("[error] bad binarization\n")
            sys.exit(1)

    page = ocropy.bytearray()
    page.copy(cropped)
    pages.append(page)

w = max(pages[0].dim(0),pages[1].dim(0))
h = max(pages[0].dim(1),pages[1].dim(1))
ocropy.pad_by(pages[0],w-pages[0].dim(0),h-pages[0].dim(1),255)
ocropy.pad_by(pages[1],w-pages[1].dim(0),h-pages[1].dim(1),255)

result = ocropy.bytearray(2*w,h)
ocropy.copy_rect(result,0,0,pages[0],0,0,w,h)
ocropy.copy_rect(result,w,0,pages[1],0,0,w,h)
bshow(result)

ocropy.write_image_gray(options.output,result)
